[AP-1]
sql =""" select  sourceid,targetid,
case when sourceid = ? then 'outbound' when targetid= ? then 'inbound' end as direction,
sum(amount) as total_amount
from transfer where sourceid= ? or targetid = ?
group by sourceid,targetid
order by total_amount desc;"""

[AP-2]
sql = """select cu.custid,la.loanapps_ts,la.amount,lt.loantrans_ts,lt.amount,lt.status
from customer cu,loanapps la, loantrans lt
where cu.custID=la.applicantid and la.id=lt.appid and cu.custID = ?;"""

[AP-2.1]
sql = "SELECT applicantid FROM loanapps where applicantid<? ORDER BY RAND() LIMIT 1;"

[AP-3]
sql = """select custId, name,phone,sum(amount)
from
(select cu.custid,cu.name,cu.phone,t.amount
from customer cu join transfer t on cu.custid = t.targetid where custid= ?
union all
select cu.custid, cu.name,cu.phone,ch.amount
from customer cu join checking ch on cu.custid = ch.targetid where cu.custid= ?) income
group by custid,name,phone"""

[AP-4]
sql = """select custid, name,phone,sum(amount)
from (select cu.custid,cu.name,cu.phone,t.amount
from customer cu join transfer t on cu.custid = t.sourceid where custid= ?
union all
select cu.custid,cu.name,cu.phone,ch.amount
from customer cu join checking ch on cu.custid = ch.sourceid where cu.custid= ?) outcome
group by custid,name,phone"""

[AP-5]
sql = """select cu.custid ,sum(tr.amount) as total_amount
from company co,transfer tr,customer cu
where cu.custid = tr.targetid
and cu.companyid = co.companyid
and tr.sourceid = co.companyid
and co.companyid = ?
and tr.type='salary'
group by cu.custid
order by total_amount desc;"""

[AP-6]
sql = """select cid, total_expense, sum(ch.amount) as checking_amount from
(select co.companyid as cid, sum(tr.amount) as total_expense
from company co, transfer tr
where co.companyid = tr.sourceid and co.name like 'software%'
group by co.companyid
order by total_expense DESC limit 10) big_company, checking ch
where big_company.cid=ch.sourceid
group by cid, total_expense
order by total_expense DESC, checking_amount desc;"""

[AP-7]
sql = """(select tr.sourceid as sourceid, tr.targetid as targetid, tr.type as type, sum(tr.amount) as amount
from company co, transfer tr, customer cu
where cu.custid=tr.sourceid
and tr.targetid=co.companyid
and co.companyid = ?
and type!='salary'
group by sourceid, targetid, type
order by amount DESC limit 3)
UNION ALL
(select ch.sourceid as sourceid, ch.targetid as targetid, ch.type as type, sum(ch.amount) as amount
from company co, checking ch, customer cu
where cu.custid=ch.sourceid
and ch.targetid = co.companyid
and co.companyid=?
and type!='salary'
group by sourceid, targetid, type
order by amount DESC limit 3)
UNION ALL
(select tr.sourceid as sourceid, tr.targetid as targetid, tr.type as type, sum(tr.amount) as amount
from company co, transfer tr, customer cu
where cu.custid=tr.targetid
and tr.sourceid=co.companyid
and co.companyid=?
and type!='salary'
group by sourceid, targetid, type
order by amount DESC limit 3)
UNION ALL
(select ch.sourceid as sourceid, ch.targetid as targetid, ch.type as type, sum(ch.amount) as amount
from company co, checking ch, customer cu
where cu.custid=ch.targetid
and ch.sourceid=co.companyid
and co.companyid=?
and type!='salary'
group by sourceid, targetid, type
order by amount DESC limit 3);"""

[AP-8]
sql =""" With blocked_account as (select c.name as name, s.userID as id
from customer c, savingaccount s where c.custid=s.userID and (c.isblocked=1 or s.isblocked=1) limit 100)
select name, t.sourceid, t.targetid, sum(t.amount) as amount
from blocked_account b, transfer t where b.id=t.sourceid group by name, t.sourceid, t.targetid
UNION ALL
select name, t.sourceid, t.targetid, sum(t.amount) as amount
from blocked_account b, transfer t
where b.id=t.targetid group by name, t.sourceid, t.targetid
UNION ALL
select name, c.sourceid, c.targetid, sum(c.amount) as amount
from blocked_account b, checking c where b.id=c.sourceid group by name, c.sourceid, c.targetid
UNION ALL
select name, c.sourceid, c.targetid, sum(c.amount) as amount
from blocked_account b, checking c where b.id=c.targetid group by name, c.sourceid, c.targetid
order by amount DESC;"""

[AP-9]
sql = """select c.name, sum(t.amount) as total_revenue
from company c, transfer t
where c.companyid = t.targetid
and exists (select *
from loanapps la
where la.applicantid=c.companyid and loanapps_ts
between str_to_date('2023-11-01','%Y-%m-%d')  and (str_to_date('2023-11-01','%Y-%m-%d') + 60))
and not exists (select * from loantrans lt
where lt.applicantid=c.companyid and loantrans_ts
between str_to_date('2023-11-01','%Y-%m-%d')  and (str_to_date('2023-11-01','%Y-%m-%d') + 60))
group by c.name order by total_revenue DESC;"""

[AP-10]
sql = """With big_account_inbound as (select t.targetid as id, c.name as name, t.amount as amount
from customer c, transfer t
where t.transfer_ts between str_to_date('2023-11-01','%Y-%m-%d') and (cast('2023-11-01' as date) + 60)
and c.custid=t.targetid
group by name, id
order by amount DESC limit 10),
big_account_outbound as (select b.id, b.name as name, sum(t.amount) as amount
from big_account_inbound b, transfer t
where t.transfer_ts between str_to_date('2023-11-01','%Y-%m-%d') and (cast('2023-11-01' as date) + 60)
and b.id=t.sourceid
group by b.id, b.name)
select bin.id, bin.name, (sum(bin.amount)-sum(bout.amount)) as revenue
from big_account_inbound bin, big_account_outbound bout
where bin.id=bout.id
group by bin.id, bin.name
order by revenue DESC;"""

[AP-11]
sql = """select co.companyid, cu.custid, sum(t.amount) as invest_amount, count(t.amount) as count, avg(sa.balance) as saving_balance,
avg(ca.balance) as checking_balance, avg(la.amount) as avg_loan_amount
from company co, transfer t, customer cu, savingaccount sa, loanapps la, checkingaccount ca
where t.targetid =co.companyid
and t.sourceid =cu.custid
and cu.custid =sa.userid
and cu.custid =ca.userid
and la.applicantid =cu.custid
and t.type='invest'
and sa.balance> 1000 and ca.balance> 1000
and co.category in ('software_IT','internet_service', 'telecommunication', 'technology_service', 'computer_communication_manufacturing')
group by co.companyid, cu.custid
order by invest_amount DESC, count DESC, saving_balance DESC, checking_balance DESC, avg_loan_amount DESC;"""

[AP-12]
sql = """select co.companyid as cid, count(case when lt.status='accept' then 1 else null end) * 100.0/count(la.id) as rate
from company co, loanapps la, loantrans lt
where co.category =?
and co.companyid=la.applicantid and la.applicantid=lt.applicantid
group by cid
order by rate DESC limit 10;"""

[AP-13]
sql = """select sourceid,targetid ,province,amount,
rank() over (partition by province order by amount desc) as ranking
from transfer tr,customer cu
where tr.targetid = cu.custid and tr.sourceid = ?"""

[TP-1]
sql = "select * from customer where custid=?;"

[TP-2]
sql = "select * from company where companyID=?;"

[TP-3]
sql = "select * from SAVINGACCOUNT where accountid=?;"

[TP-4]
sql = "select * from CHECKINGACCOUNT where accountid=?;"

[TP-5]
sql = """select * from transfer where sourceid = ? or targetid = ?
order by transfer_ts desc limit 1;"""

[TP-6]
sql = """select * from checking where sourceid = ? or targetid = ?
order by checking_ts desc limit 1;"""

[TP-7]
sql = """select * from loanapps where applicantid=?
order by loanapps_ts desc limit 1;"""

[TP-8]
sql = """select * from loantrans
where applicantid=? order by loantrans_ts desc limit 1;"""

[TP-9]
sql = [
"SELECT balance FROM savingAccount WHERE accountID = ?",
"UPDATE savingAccount SET balance = balance - ? where accountID = ?" ,
"UPDATE savingAccount SET balance = balance + ? where accountID = ?",
"INSERT INTO transfer(id,sourceID,targetID,amount,type,transfer_ts) VALUES (0, ?,?,?,?,?)"
]

[TP-10]
sql = [
"SELECT custID FROM CUSTOMER WHERE COMPANYID = ?",
"UPDATE SAVINGACCOUNT SET BALANCE = BALANCE - ? WHERE ACCOUNTID = ?",
"UPDATE SAVINGACCOUNT SET BALANCE = BALANCE + ? WHERE ACCOUNTID = ?",
"INSERT INTO TRANSFER(id,sourceID,targetID,amount,type,transfer_ts) VALUES (0, ?,?,?,?,?)"
]

[TP-11]
sql = [
"SELECT balance FROM CHECKINGACCOUNT WHERE accountID = ?",
"UPDATE CHECKINGACCOUNT SET balance = balance - ? where accountID = ?",
"UPDATE CHECKINGACCOUNT SET balance = balance + ? where accountID = ?",
"INSERT INTO CHECKING VALUES (0, ?,?,?,?,?)"
]

[TP-12]
sql = [
"SELECT loan_balance FROM customer WHERE custID = ?",
"UPDATE customer SET loan_balance = loan_balance - ? where custID = ?",
"SELECT loan_balance FROM company WHERE companyID = ?",
"UPDATE company SET loan_balance = loan_balance - ? where companyID = ?",
"INSERT INTO LOANAPPS  VALUES (0, ?,?,?,?,?);"
]

[TP-13]
sql = [
"SELECT ID, APPLICANTID, AMOUNT, DURATION, LOANAPPS_ts FROM LOANAPPS WHERE status='under_review' order by LOANAPPS_ts limit 1;",
"INSERT INTO LOANTRANS VALUES(DEFAULT, ?,?,?,?,?,?,?,?);",
"UPDATE CUSTOMER SET loan_balance = loan_balance + ? where custID = ?",
"UPDATE COMPANY SET loan_balance = loan_balance + ? where companyID = ?",
"UPDATE LOANAPPS SET STATUS=? WHERE ID=?;"
]

[TP-14]
sql = [
"SELECT id, APPLICANTID, AMOUNT, contract_timestamp FROM LOANTRANS WHERE status='accept' order by LOANTRANS_TS limit 1;",
"UPDATE SAVINGACCOUNT SET BALANCE = BALANCE + ? WHERE ACCOUNTID = ?;",
"UPDATE LOANTRANS SET STATUS='lent', LOANTRANS_TS=? WHERE ID=?;"
]

[TP-15]
sql = [
"SELECT id, APPLICANTID, duration, LOANTRANS_TS FROM LOANTRANS WHERE status='lent' order by LOANTRANS_TS limit 1;",
"UPDATE LOANTRANS SET delinquency=1, LOANTRANS_TS=? WHERE id=?;"
]

[TP-16]
sql = [
"SELECT id, APPLICANTID, duration, amount, LOANTRANS_TS FROM LOANTRANS WHERE status='lent' order by LOANTRANS_TS limit 1;",
"SELECT balance from SAVINGACCOUNT WHERE ACCOUNTID = ?;",
"UPDATE SAVINGACCOUNT SET BALANCE = BALANCE - ? WHERE ACCOUNTID = ?;",
"UPDATE LOANTRANS SET status='repaid',LOANTRANS_TS=? WHERE id=?;"
]

[TP-17]
sql = [
"select balance,isblocked from savingAccount where accountid = ?",
"select balance,isblocked from checkingAccount where accountid =?",
"UPDATE SAVINGACCOUNT SET BALANCE = BALANCE - ? WHERE ACCOUNTID = ?",
"update checkingAccount set balance = balance + ? where accountid = ?"
]

[TP-18]
sql = [
"select balance,isblocked from savingAccount where accountid = ?",
"select balance,isblocked from checkingAccount where accountid =?",
"update checkingAccount set balance = balance - ? where accountid = ?",
"UPDATE SAVINGACCOUNT SET BALANCE = BALANCE + ? WHERE ACCOUNTID = ?"
]

[AT-00]
sql= [
    "select custID from customer where companyID = ? order by created_date ASC limit 10",
    "delete from savingAccount where accountID = ?"
]

[AT-0]
sql= [
    "select custID from customer where companyID = ? order by created_date limit 10",
    "update savingAccount set fresh_ts=current_timestamp where accountID = ?"
]

[AT-1]
sql = [
"SELECT  /*+ query_timeout(20000000) */ isblocked,balance FROM savingAccount WHERE accountID = ?",
"select  /*+ query_timeout(20000000) */ count(*) from transfer t, savingaccount s where t.sourceid=? and s.isblocked=1  and t.targetid = s.accountid;",
"UPDATE savingAccount SET balance = balance - ? where accountID = ?",
"UPDATE savingAccount SET balance = balance + ? where accountID = ?",
"INSERT INTO transfer(id,sourceID,targetID,amount,type,transfer_ts) VALUES (0, ?,?,?,?,?)"
]

[AT-2]
sql = [
"SELECT  /*+ query_timeout(20000000) */ isblocked,balance FROM checkingAccount WHERE accountID = ?",
"select  /*+ query_timeout(20000000) */ count(*) from checking ch, checkingAccount ca where ch.sourceid=? and ca.isblocked=1 and ch.targetid=ca.accountid;",
"UPDATE checkingAccount SET balance = balance - ? where accountID = ?",
"UPDATE checkingAccount SET balance = balance + ? where accountID = ?",
"INSERT INTO checking VALUES (0, ?,?,?,?,?)"
]

[AT-3]
sql = [
"SELECT  /*+ query_timeout(20000000) */ isblocked FROM SavingAccount WHERE accountID = ?",
"""Select (inbound.t_amount-outbound.t_amount) as t_amount  from
(select sa.accountid as sid, sum(t.amount) as t_amount from savingaccount sa, transfer t
where sa.accountid=? and sa.accountid=t.sourceid
group by sid) as outbound,
(select sa.accountid as sid, sum(t.amount) as t_amount from savingaccount sa, transfer t
where sa.accountid=? and sa.accountid=t.targetid
group by sid) as inbound""",
"INSERT INTO LOANTRANS VALUES(0, ?,?,?,?,?,?,?,?);",
"UPDATE LoanApps SET status = 'accept',loanapps_ts=? where id = ?",
" UPDATE LoanApps SET status = 'reject',loanapps_ts=? where id = ?"
]

[AT-3.1]
sql = """SELECT t1.applicantid, t1.id, t1.loanapps_ts, t1.duration
FROM loanapps t1
where t1.id >= (SELECT ROUND(RAND()*(SELECT MAX(id) FROM loanapps where status='under_review')) AS id)
and t1.status='under_review'  ORDER BY t1.id LIMIT 1;
"""


[AT-4]
sql = [
"select  /*+ query_timeout(20000000) */ count(distinct sa2.accountid) from transfer t, savingAccount sa1, savingAccount sa2, loantrans lt where sa1.accountid = ? and sa1.accountid = t.targetid and t.sourceid = sa2.accountid and lt.applicantid=sa2.accountid and lt.status='accept';",
"UPDATE savingAccount SET balance = balance + ? where accountID = ?;",
"UPDATE LoanTrans SET status = 'lent', contract_timestamp=? where id = ?;"
]

[AT-4.1]
sql = """SELECT  /*+ query_timeout(20000000) */ t1.applicantid, t1.amount,t1.id, t1.loantrans_ts
FROM loantrans t1
where t1.id >= (SELECT ROUND(RAND()*(SELECT MAX(id) FROM loantrans where status='accept')) AS id)
and t1.status='accept'  ORDER BY t1.id LIMIT 1;
"""

[AT-5]
sql = [
"SELECT id FROM LoanTrans WHERE applicantID = ? and date(contract_timestamp) + duration < str_to_date('2024-01-01','%Y-%m-%d') and status!='lent';",
" UPDATE LoanTrans SET delinquency=1 where id = ?"
]

[AT-5.1]
sql ="SELECT applicantid FROM loantrans where status='lent' ORDER BY RAND() LIMIT 1;"


[AT-6.1]
sql = "SELECT applicantid FROM loantrans where status='lent' and delinquency=1 ORDER BY RAND() LIMIT 1"


[AT-6]
sql = [
"SELECT count(applicantid) FROM LoanTrans WHERE date(contract_timestamp) + duration + 365 < str_to_date('2024-01-01','%Y-%m-%d') and applicantid=?;",
"UPDATE savingaccount SET isBlocked = 1  where accountID = ?;",
"UPDATE checkingaccount SET isBlocked = 1 where accountID = ?;"
]

[IQ-1]
sql="""select  t.transfer_ts, t.amount, c.custid, c.name  from transfer t, customer c where t.sourceid =?
and t.targetid = c.custid UNION select t.transfer_ts, t.amount, c.custid, c.name
from transfer t, customer c
where t.targetid=? and t.sourceid=c.custid
order by transfer_ts
Limit 10
"""

[IQ-2]
sql="""select  ch.checking_ts, ch.amount, co.companyid, co.name
from checking ch, company co
where ch.sourceid = ? and ch.targetid= co.companyid
UNION
select ch.checking_ts, ch.amount, co.companyid, co.name
from checking ch, company co
where ch.targetid=? and ch.sourceid= co.companyid
order by checking_ts
Limit 10;"""

[IQ-3]
sql="""select  co.name, cu.custid, cu.name, sa.isblocked, ca.isblocked
from customer cu, company co, savingaccount sa, checkingaccount ca
where co.companyid = ? and cu.companyid= co.companyid
and sa.accountid=cu.custid and ca.accountid=cu.custid;"""

[IQ-4]
sql="""(select co.name, t.amount, t.transfer_ts
from company co, transfer t
where t.sourceid = ? and t.type='invest' and
t.targetid= co.companyid)
UNION
(select cu.name, t.amount, t.transfer_ts
from customer cu, transfer t
where t.sourceid =? and t.type='invest' and
t.targetid= cu.custid);"""

[IQ-5]
sql="""select t.amount, t.targetid, co.name, cu.name
from loantrans lt
Left join transfer t on lt.applicantid = t.sourceid
Left join customer cu on t.targetid=cu.custid
Left join company co on t.targetid=co.companyid
where t.sourceid =? and lt.delinquency = 1;"""

[IQ-5.1]
sql="SELECT applicantid FROM loantrans ORDER BY RAND() LIMIT 1"

[IQ-6]
sql =""" With abnormal_accounts as
(select distinct(applicantid) as id, amount from loantrans lt1
where contract_timestamp is not null and date(contract_timestamp) + duration < str_to_date('2024-01-01','%Y-%m-%d') order by amount DESC limit 100)
Select  aa.id, lt2.amount, lt2.loantrans_ts, lt2.status, la.loanapps_ts
from loantrans lt2, loanapps la, abnormal_accounts aa
where aa.id=lt2.applicantid and la.id= lt2.appid; """

[fresh]
sql = """select t.id, t.fresh_ts
from transfer t, customer c
where t.targetid=? and t.targetid=c.custid and t.fresh_ts is not null
order by t.fresh_ts DESC limit 10 """

[fresh-1]
sql="""select sa.accountID, sa.fresh_ts
from savingaccount sa,company co,customer cu
where sa.accountid=cu.custid and co.companyid=? and co.companyID = cu.companyID
 order by cu.created_date ASC limit 10;"""

